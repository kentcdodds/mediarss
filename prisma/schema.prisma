// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password      Password?
  roles         Role[]
  sessions      Session[]
  passkey       Passkey[]
  feeds         Feed[]             @relation("FeedOwnership") // Feeds created by the user
  subscriptions FeedSubscription[] // Feeds the user is subscribed to
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Passkey {
  id             String   @id
  aaguid         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  publicKey      Bytes
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  webauthnUserId String
  counter        BigInt
  deviceType     String // 'singleDevice' or 'multiDevice'
  backedUp       Boolean
  transports     String? // Stored as comma-separated values

  @@index(userId)
}

model Feed {
  id          String  @id @default(cuid())
  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RSS feed configuration
  sort          String @default("chronological")
  sortDirection String @default("descending") // "ascending" or "descending"
  overrides     Json? // Stores RSS feed metadata overrides

  owner   User   @relation("FeedOwnership", fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  subscribers FeedSubscription[]
  image       FeedImage?
  media       FeedMedia[]
}

model FeedImage {
  id          String  @id @default(cuid())
  title       String?
  description String?
  link        String?
  filePath    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feed   Feed   @relation(fields: [feedId], references: [id])
  feedId String @unique
}

model FeedMedia {
  id       String @id @default(cuid())
  filePath String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feed   Feed   @relation(fields: [feedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  feedId String

  @@index([feedId])
}

model FeedSubscription {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  feed   Feed   @relation(fields: [feedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  feedId String

  @@unique([userId, feedId])
  @@index([userId])
  @@index([feedId])
}
